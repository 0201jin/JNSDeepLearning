<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.4\include\</FILEPATH>
      <FILENAME>cuda_runtime.h</FILENAME>
      <LINE>312</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>열거형 형식 'cudaError'이(가) 범위가 지정되지 않았습니다. 'enum'(Enum.3) 대신 'enum class'를 사용하세요.</DESCRIPTION>
    <FUNCTION>cudaEventCreate</FUNCTION>
    <DECORATED>?cudaEventCreate@@YA?AW4cudaError@@PEAPEAUCUevent_st@@I@Z</DECORATED>
    <FUNCLINE>307</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\0201j\Desktop\작업\JNSDeepLearning\JNSDeepLearning\RNN\</FILEPATH>
      <FILENAME>RNN.cpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>RNN_Layer::Train_M2O</FUNCTION>
    <DECORATED>?Train_M2O@RNN_Layer@@QEAAXV?$vector@NV?$allocator@N@std@@@std@@N@Z</DECORATED>
    <FUNCLINE>59</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\0201j\Desktop\작업\JNSDeepLearning\JNSDeepLearning\RNN\</FILEPATH>
      <FILENAME>RNN.cpp</FILENAME>
      <LINE>124</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>RNN_Layer::Train_O2M</FUNCTION>
    <DECORATED>?Train_O2M@RNN_Layer@@QEAAXNV?$vector@NV?$allocator@N@std@@@std@@@Z</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\0201j\Desktop\작업\JNSDeepLearning\JNSDeepLearning\RNN\</FILEPATH>
      <FILENAME>RNN.cpp</FILENAME>
      <LINE>127</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>RNN_Layer::Train_O2M</FUNCTION>
    <DECORATED>?Train_O2M@RNN_Layer@@QEAAXNV?$vector@NV?$allocator@N@std@@@std@@@Z</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\0201j\Desktop\작업\JNSDeepLearning\JNSDeepLearning\RNN\</FILEPATH>
      <FILENAME>RNN.cpp</FILENAME>
      <LINE>174</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>RNN_Layer::Train_M2M</FUNCTION>
    <DECORATED>?Train_M2M@RNN_Layer@@QEAAXV?$vector@NV?$allocator@N@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>160</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\0201j\Desktop\작업\JNSDeepLearning\JNSDeepLearning\RNN\</FILEPATH>
      <FILENAME>RNN.cpp</FILENAME>
      <LINE>177</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>RNN_Layer::Train_M2M</FUNCTION>
    <DECORATED>?Train_M2M@RNN_Layer@@QEAAXV?$vector@NV?$allocator@N@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>160</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>